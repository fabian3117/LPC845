/*******************************************************************************************************************************//**
 *
 * @file		gpio.cpp
 * @brief		Descripcion del modulo
 * @date		22 jun. 2022
 * @author		Ing. Marcelo Trujillo
 *
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** INCLUDES
 **********************************************************************************************************************************/
#include "LPC845.h"
#include "gpio.h"

/***********************************************************************************************************************************
 *** DEFINES PRIVADOS AL MODULO
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** MACROS PRIVADAS AL MODULO
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** TIPOS DE DATOS PRIVADOS AL MODULO
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** TABLAS PRIVADAS AL MODULO
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** VARIABLES GLOBALES PUBLICAS
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** VARIABLES GLOBALES PRIVADAS AL MODULO
 **********************************************************************************************************************************/

/***********************************************************************************************************************************
 *** IMPLEMENTACION DE LOS METODODS DE LA CLASE
 **********************************************************************************************************************************/
gpio::gpio ( uint8_t puerto , uint8_t bit , uint8_t modo , uint8_t direccion , uint8_t actividad ,bool Interrupciones):
m_puerto( puerto ),m_bit( bit ),m_modo( modo ),m_direccion(direccion),m_actividad(actividad)
{
	m_error = ok;

	if( m_puerto > port1 )
		m_error = error;
	if( m_puerto == port0 && m_bit > max_bits_port0 )
		m_error = error;
	if( m_puerto == port1 && m_bit > max_bits_port1 )
		m_error = error;
if(Interrupciones){
	SYSCON->PINTSEL[0]=(bit+puerto*31);
	NVIC->ISER[0]|=(0x1<<24);
	SYSCON->SYSAHBCLKCTRL0|=(0x1<<28);
	PINT->ISEL|=(MODO_Detector_Nivel);
	PINT->IENR|=(Habilita_Interr);
	PINT->IENF|=0x1;
}
}

uint8_t gpio::SetPin( void )
{
	if ( m_error == ok )
	{
		if ( m_actividad == high )
			GPIO->SET[ m_puerto ] |= 1 << m_bit;
		else
			GPIO->CLR[ m_puerto ] |= 1 << m_bit;
	}

	return m_error ;
}
uint8_t gpio:: ClrPin( void )
{
	if ( m_error == ok )
	{
		if ( m_actividad == high )
			GPIO->CLR[ m_puerto ] |= 1 << m_bit;
		else
			GPIO->SET[ m_puerto ] |= 1 << m_bit;
	}

	return m_error ;
}

uint8_t gpio:: SetTogglePin( void )
{
	return 1;
}
uint8_t gpio:: SetDir( void )
{
	if ( m_error == ok )
	{
		if ( m_direccion == output )
			GPIO->DIRSET[m_puerto] |= 1 << m_bit ;
		else
			GPIO->DIRCLR[m_puerto] |= 1 << m_bit ;
	}
	return m_error ;
}
uint8_t gpio:: SetToggleDir( void )
{
	return 1;
}
uint8_t gpio:: GetPin( void ) const
{
	if ( m_error == ok )
		return (m_actividad == high ) ? GPIO->B[m_puerto][m_bit] : !GPIO->B[m_puerto][m_bit];
	return m_error;
}
uint8_t gpio:: SetPinMode( void )
{
	return 1;
}
uint8_t gpio:: SetPinResistor( void )
{
	return 1;
}
